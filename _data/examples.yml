- path: "examples/a-coq-proof-of-a-theorem-which-turns-a-formula-containing-y-into-a-formula-conta.html"
  title: "A Coq proof of a theorem which turns a formula containing <tt>y</tt> into a formula containing <tt>f(x)</tt>"
  tags: [sigma-type]

- path: "examples/a-simple-case-of-universe-inconsistency.html"
  title: "A simple case of universe inconsistency"

- path: "examples/abstracting-patterns-in-induction-rule-for-inductive-predicates-for-coq.html"
  title: "Abstracting patterns in induction rule for inductive predicates for Coq"
  tags: [fixpoint]

- path: "examples/apply-rewrite-tactic-to-sub-expression.html"
  title: "apply rewrite tactic to sub-expression"
  tags: [congruence, tactic]

- path: "examples/applying-a-program-definition-fails-with-unable-to-unify-prop-with-goal.html"
  title: "Applying a Program Definition fails with \"unable to unify Prop with [goal]\""

- path: "examples/are-all-proofs-of-true-true-the-same.html"
  title: "Are all proofs of <tt>true = true</tt> the same?"
  tags: [match]

- path: "examples/assert-a-proposition-on-multiple-witnesses.html"
  title: "Assert a proposition on multiple witnesses"
  tags: [sigma-type]

- path: "examples/attempting-to-use-proof-irrelevance-without-creating-ill-typed-terms.html"
  title: "Attempting to use proof irrelevance without creating ill-typed terms"
  tags: [match, tactic]

- path: "examples/building-up-tree-and-decreasing-argument-of-fix.html"
  title: "Building up tree and decreasing argument of fix"
  tags: [fixpoint]

- path: "examples/call-a-theorem-using-let-in.html"
  title: "Call a theorem using let-in"
  tags: [tactic]

- path: "examples/can-any-one-help-me-how-to-prove-this-therom-in-coq.html"
  title: "Can any one help me how to prove this theorem in coq"
  tags: [classical, decidable]

- path: "examples/can-coq-intros-pattern-split-at-the-rightmost-opportunity-for-conjunction.html"
  title: "can coq intros pattern split at the rightmost opportunity for conjunction?"
  tags: [tactic]

- path: "examples/can-i-tell-coq-to-do-induction-from-n-to-n2.html"
  title: "Can I tell Coq to do induction from <tt>n</tt> to <tt>n + 2</tt>?"
  tags: [fixpoint]

- path: "examples/can-one-prove-an-equivalent-to-forall-inv-for-heterogeneous-lists-in-coq.html"
  title: "Can one prove an equivalent to <tt>Forall_inv</tt> for heterogeneous lists in Coq?"
  tags: [fixpoint, match]

- path: "examples/can-you-prove-excluded-middle-is-wrong-in-coq-if-i-do-not-import-classical-logic.html"
  title: "Can you prove Excluded Middle is wrong in Coq if I do not import classical logic"
  tags: [classical, proof-irrelevance]

- path: "examples/cannot-determine-termination.html"
  title: "Cannot determine termination"
  tags: [fixpoint]

- path: "examples/case-analysis-on-evidence-of-equality-type-in-coq.html"
  title: "case analysis on evidence of equality type in Coq"
  tags: [match, proving]

- path: "examples/characteristic-function-of-a-union.html"
  title: "Characteristic function of a union"

- path: "examples/church-numerals-and-universe-inconsistency.html"
  title: "Church numerals and universe inconsistency"

- path: "examples/classical-axioms-implies-every-proposition-is-decidable.html"
  title: "Classical axioms implies every proposition is decidable?"
  tags: [decidable]

- path: "examples/closing-a-lemma-on-list-of-nats.html"
  title: "Closing a lemma on list of nats"
  tags: [fixpoint]

- path: "examples/compute-if-in-a-decideable-prop-in-coq.html"
  title: "Compute <tt>if</tt> in a decideable prop in coq"
  tags: [decidable]

- path: "examples/context-expression-in-coq.html"
  title: "<tt>context</tt> expression in Coq"
  tags: [match]

- path: "examples/contradiction-on-natural-numbers-zero-test.html"
  title: "Contradiction on natural number's zero test"
  tags: [proving, tactic]

- path: "examples/coq-auto-tactic-fails.html"
  title: "Coq auto tactic fails"
  tags: [match, tactic]

- path: "examples/coq-automate-repeated-rewriting.html"
  title: "Coq: automate repeated rewriting"
  tags: [congruence, tactic]

- path: "examples/coq-cannot-unify-inductive-types.html"
  title: "Coq: cannot unify inductive types"
  tags: [convoy-pattern]

- path: "examples/coq-cant-infer-type-parameter-in-match.html"
  title: "Coq can't infer type parameter in <tt>match</tt>"
  tags: [convoy-pattern]

- path: "examples/coq-controlling-subst-when-we-have-many-equalities.html"
  title: "Coq: controlling <tt>subst</tt> when we have many equalities"
  tags: [tactic]

- path: "examples/coq-derive-argument-from-context.html"
  title: "Coq: Derive argument from context"
  tags: [module]

- path: "examples/coq-eliminating-forall.html"
  title: "Coq: eliminating <tt>forall</tt>?"

- path: "examples/coq-how-to-refer-to-the-types-generated-by-a-specific-constructor.html"
  title: "Coq: How to refer to the types generated by a specific constructor?"

- path: "examples/coq-index-relation.html"
  title: "Coq Index Relation"
  tags: [proof-irrelevance]

- path: "examples/coq-item-1-2-10-type-cast.html"
  title: "Coq item 1.2.10 Type cast"

- path: "examples/coq-leb-does-not-give-me-an-hypothesis-after-case-or-induction.html"
  title: "Coq <tt>leb</tt> (<tt><=?</tt>) does not give me an hypothesis after case or induction"
  tags: [proving, tactic]

- path: "examples/coq-local-ltac-definition.html"
  title: "Coq: local ltac definition"
  tags: [module]

- path: "examples/coq-path-implementation.html"
  title: "Coq <tt>path</tt> implementation"

- path: "examples/coq-proving-addition-inequality.html"
  title: "Coq proving addition inequality"
  tags: [proving]

- path: "examples/coq-proving-relation-between-and-â‰¤.html"
  title: "Coq: Proving relation between <tt><</tt> and <tt><=</tt>"
  tags: [fixpoint]

- path: "examples/coq-recursive-definition-of-fibonacci-is-ill-formed.html"
  title: "Coq: Recursive definition of fibonacci is ill-formed"
  tags: [fixpoint, tactic]

- path: "examples/coq-return-value-of-type-which-is-equal-to-function-return-type.html"
  title: "Coq - return value of type which is equal to function return type"

- path: "examples/coq-rewriting-with-forall-in-hypothesis-or-goal.html"
  title: "Coq: Rewriting with <tt>forall</tt> in hypothesis or goal"
  tags: [tactic]

- path: "examples/coq-testing-partial-convertibilty.html"
  title: "Coq: Testing partial convertibilty"

- path: "examples/coq-theorem-proving-simple-fraction-law-in-peano-arithmetic.html"
  title: "Coq theorem proving: Simple fraction law in peano arithmetic"
  tags: [tactic]

- path: "examples/coq-viewing-proof-term-during-proof-script-writing.html"
  title: "Coq: viewing proof term during proof script writing"
  tags: [proving]

- path: "examples/dealing-with-let-in-expressions-in-current-goal.html"
  title: "Dealing with let-in expressions in current goal"
  tags: [match]

- path: "examples/decidable-equality-statement-with-set-vs-prop.html"
  title: "Decidable equality statement with <tt>Set</tt> vs. <tt>Prop</tt>"
  tags: [classical, decidable]

- path: "examples/decide-disjunctions-in-sort-prop.html"
  title: "Decide disjunctions in sort <tt>Prop</tt>"
  tags: [classical]

- path: "examples/decide-equality-for-mutually-recursive-types-in-coq.html"
  title: "<tt>decide equality</tt> for Mutually Recursive Types in Coq?"
  tags: [fixpoint]

- path: "examples/decreasing-argument-and-what-is-a-program-fixpoint.html"
  title: "Decreasing argument (and what is a <tt>Program Fixpoint</tt>)"
  tags: [fixpoint]

- path: "examples/defining-a-function-that-returns-one-element-satisfying-the-condition.html"
  title: "Defining a function that returns one element satisfying the condition"
  tags: [convoy-pattern]

- path: "examples/defining-integers-inductively-in-coq-inductive-definitions-subject-to-relations.html"
  title: "Defining integers inductively in Coq (inductive definitions subject to relations)"

- path: "examples/defining-subtype-relation-in-coq.html"
  title: "Defining subtype relation in Coq"
  tags: [coercion]

- path: "examples/dependent-pair-types.html"
  title: "Dependent Pair Types"
  tags: [sigma-type]

- path: "examples/dependent-type-as-a-function-argument-in-coq.html"
  title: "Dependent type as a function argument in Coq"
  tags: [sigma-type]

- path: "examples/deriving-facts-on-pattern-matching-in-coq.html"
  title: "deriving facts on pattern matching in coq"
  tags: [convoy-pattern, proving]

- path: "examples/destruct-if-condition-in-program-fixpoint-coq.html"
  title: "Destruct if condition in program fixpoint coq"
  tags: [fixpoint]

- path: "examples/destructing-equality-of-dependent-records-in-coq.html"
  title: "Destructing equality of dependent records in coq"
  tags: [sigma-type]

- path: "examples/difference-between-sumbool-and-intuitionnistic-disjunction.html"
  title: "Difference between <tt>sumbool</tt> and intuitionnistic disjunction"
  tags: [classical]

- path: "examples/display-the-original-name-of-the-imported-module-in-coq.html"
  title: "Display the original name of the imported module in Coq"
  tags: [module]

- path: "examples/does-gallina-have-holes-like-in-agda.html"
  title: "Does Gallina have holes like in Agda?"
  tags: [proving]

- path: "examples/ease-life-in-dependently-typed-programming-using-function-and-program-in-coq.html"
  title: "Ease life in dependently typed programming using <tt>Function</tt> and <tt>Program</tt> in Coq"
  tags: [proving]

- path: "examples/efficient-way-of-defining-multiple-functions-of-the-same-type.html"
  title: "Efficient Way of Defining Multiple Functions of the Same Type"

- path: "examples/equality-of-dependent-types-and-dependent-values.html"
  title: "Equality of dependent types and dependent values"

- path: "examples/error-tactic-failure-the-relation-fun-x-y-bloodtype-x-y-is-not-a-dec.html"
  title: "Error \"Tactic failure: The relation (<tt>fun x y : BloodType => x <> y</tt>) is not a declared reflexive relation.\" when proving a theorem about function"
  tags: [tactic]

- path: "examples/even-sn-not-even-n-apply-1-hypothesis-in-another.html"
  title: "<tt>even_Sn_not_even_n</tt> - apply 1 hypothesis in another"

- path: "examples/existential-goals-are-filled-in-too-soon.html"
  title: "Existential goals are filled in too soon"

- path: "examples/explanation-transitivity-of-equal-coq.html"
  title: "Explanation transitivity of equal coq"

- path: "examples/extensible-tactic-in-coq.html"
  title: "Extensible tactic in Coq"

- path: "examples/finding-a-well-founded-relation-to-prove-termination-of-a-function-that-stops-de.html"
  title: "Finding a well founded relation to prove termination of a function that stops decreasing at some point"

- path: "examples/fixpoint-with-prop-inhabitant-as-argument.html"
  title: "Fixpoint with <tt>Prop</tt> inhabitant as argument"

- path: "examples/generalising-a-set-of-proofs-in-coq.html"
  title: "Generalising a set of proofs in coq"
  tags: [tactic]

- path: "examples/generalizing-expressions-under-binders.html"
  title: "generalizing expressions under binders"

- path: "examples/generic-equality-lifting-in-coq.html"
  title: "Generic equality lifting in coq"

- path: "examples/how-can-i-construct-terms-in-first-order-logic-using-coq.html"
  title: "How can I construct terms in first-order logic using Coq?"
  tags: [fixpoint]

- path: "examples/how-can-i-generalise-coq-proofs-of-an-iff.html"
  title: "How can I generalise Coq proofs of an iff?"
  tags: [tactic]

- path: "examples/how-can-i-prove-that-she-cannot-prove-or-commutative-with-only-intro-and-apply.html"
  title: "How can I prove that she cannot prove <tt>Or_commutative</tt> with only intro and apply?"

- path: "examples/how-can-i-rewrite-selectively-in-coq.html"
  title: "How can I rewrite selectively in Coq?"
  tags: [tactic]

- path: "examples/how-can-i-use-type-arguments-in-an-ltac.html"
  title: "How can I use type arguments in an ltac?"
  tags: [match]

- path: "examples/how-can-i-write-a-function-of-the-following-form-in-coq.html"
  title: "How can I write a function of the following form in Coq?"

- path: "examples/how-could-i-make-example-for-sigma-type-in-coq.html"
  title: "How could I make example for sigma type in Coq?"

- path: "examples/how-do-i-provide-implicit-arguments-explicitly-in-coq.html"
  title: "How do I provide implicit arguments explicitly in Coq?"
  tags: [tactic]

- path: "examples/how-do-you-lookup-the-definition-or-implementation-of-coq-proof-tactics.html"
  title: "How do you lookup the definition or implementation of Coq proof tactics?"
  tags: [tactic]

- path: "examples/how-do-you-prove-in-coq-that-e-p-p-eq-refl.html"
  title: "How do you prove in Coq that <tt>(e: p = p) = eq_refl</tt>?"

- path: "examples/how-does-auto-interract-with-biconditional-iff.html"
  title: "How does <tt>auto</tt> interract with biconditional (iff)"
  tags: [tactic]

- path: "examples/how-does-decidable-equality-works-with-list-remove.html"
  title: "How does decidable equality works with <tt>List.remove</tt>?"
  tags: [decidable]

- path: "examples/how-does-one-inspect-what-more-complicated-tactics-do-in-coq-step-by-step.html"
  title: "How does one inspect what more complicated tactics do in Coq step-by-step?"
  tags: [tactic]

- path: "examples/how-proof-assistants-are-implemented.html"
  title: "How proof assistants are implemented?"

- path: "examples/how-proof-functions-prove.html"
  title: "How proof functions prove?"

- path: "examples/how-to-add-assumed-true-statements-in-coq.html"
  title: "How to add \"assumed true\" statements in Coq"
  tags: [tactic]

- path: "examples/how-to-add-variables-introduced-by-set-tactic-to-a-hint-db.html"
  title: "How to add variables introduced by set tactic to a Hint DB?"

- path: "examples/how-to-debug-tactic-failure-in-a-match-goal-branch.html"
  title: "How to debug tactic failure in a match goal branch?"

- path: "examples/how-to-define-an-automatically-unfoldable-definition.html"
  title: "How to define an automatically unfoldable definition"
  tags: [tactic]

- path: "examples/how-to-define-axiom-of-a-line-as-two-points-in-coq.html"
  title: "How to define axiom of a line as two points in Coq"

- path: "examples/how-to-enumerate-set-in-coq-ensemble.html"
  title: "How to enumerate set in Coq Ensemble"
  tags: [classical]

- path: "examples/how-to-implement-a-union-find-disjoint-set-data-structure-in-coq.html"
  title: "How to implement a union-find (disjoint set) data structure in Coq?"

- path: "examples/how-to-leave-a-goal-unfinished-in-coq.html"
  title: "How to leave a goal unfinished in Coq"
  tags: [tactic]

- path: "examples/how-to-make-algebraic-manipulations-in-coq-easier.html"
  title: "How to make algebraic manipulations in Coq easier?"
  tags: [proving]

- path: "examples/how-to-make-use-of-information-known-about-this-function-type-in-coq.html"
  title: "How to make use of information known about this function type in Coq"
  tags: [fixpoint, match]

- path: "examples/how-to-prove-decidability-of-a-partial-order-inductive-predicate.html"
  title: "How to prove decidability of a partial order inductive predicate?"
  tags: [decidable]

- path: "examples/how-to-prove-equality-from-equality-of-some.html"
  title: "How to prove equality from equality of <tt>Some</tt>"
  tags: [congruence]

- path: "examples/how-to-prove-non-equality-of-terms-produced-by-two-different-constructors-of-the.html"
  title: "How to prove non-equality of terms produced by two different constructors of the same inductive in coq?"
  tags: [tactic]

- path: "examples/how-to-prove-that-a-number-is-prime-using-znumtheory-in-coq.html"
  title: "How to prove that a number is prime using Znumtheory in Coq"

- path: "examples/how-to-prove-that-terms-of-a-first-order-language-are-well-founded.html"
  title: "How to prove that terms of a first-order language are well-founded?"
  tags: [fixpoint]

- path: "examples/how-to-provide-proof-that-two-values-are-different.html"
  title: "How to provide proof that two values are different?"
  tags: [congruence]

- path: "examples/how-to-solve-contradiction-in-coq.html"
  title: "How to solve contradiction in Coq"

- path: "examples/how-to-specialize-nested-hypotheses-in-coq.html"
  title: "How to specialize nested hypotheses in Coq?"
  tags: [tactic]

- path: "examples/how-to-specify-explicit-equality-in-coq-search-patterns.html"
  title: "How to specify explicit equality in Coq search patterns?"
  tags: [tactic]

- path: "examples/how-to-step-through-semicolons-separated-tactics-sequence-in-coqide.html"
  title: "How to step through semicolons separated tactics sequence in coqide?"
  tags: [tactic]

- path: "examples/how-to-turn-an-single-unification-variable-into-a-goal-during-proof.html"
  title: "How to turn an single unification variable into a goal, during proof"
  tags: [tactic]

- path: "examples/how-to-write-to-a-file-from-coq.html"
  title: "how to write to a file, from coq"

- path: "examples/import-module-vs-include-module-in-coq-module-system.html"
  title: "<tt>Import <Module></tt> vs. <tt>Include <Module></tt> in Coq Module system"
  tags: [module]

- path: "examples/improving-dependently-typed-reverse-function.html"
  title: "Improving dependently typed reverse function"

- path: "examples/in-coq-how-to-remove-a-defined-variable-from-the-namespace.html"
  title: "In Coq, how to remove a defined variable from the namespace?"
  tags: [tactic]

- path: "examples/in-coq-if-then-else-allows-non-boolean-first-argument.html"
  title: "In Coq, \"if then else\" allows non-boolean first argument?"
  tags: [match]

- path: "examples/in-coq-is-there-a-way-to-see-the-tactics-applied-by-tauto.html"
  title: "In Coq, is there a way to see the tactics applied by <tt>tauto</tt>?"

- path: "examples/in-place-simplification-for-coq.html"
  title: "In-place simplification for Coq"
  tags: [tactic]

- path: "examples/in-the-coq-tactics-language-what-is-the-difference-between-intro-and-intros.html"
  title: "In the coq tactics language, what is the difference between <tt>intro</tt> and <tt>intros</tt>"

- path: "examples/induction-on-record-member-in-coq.html"
  title: "Induction on record member in Coq?"
  tags: [tactic]

- path: "examples/induction-principle-for-le.html"
  title: "Induction principle for <tt>le</tt>"
  tags: [fixpoint]

- path: "examples/induction-proofs-on-msets.html"
  title: "Induction proofs on <tt>MSet</tt>s"

- path: "examples/inductive-definition-of-boolean.html"
  title: "Inductive definition of boolean"

- path: "examples/instantiating-an-existential-with-a-specific-proof.html"
  title: "Instantiating an existential with a specific proof"
  tags: [proving, tactic]

- path: "examples/interactive-theorem-proving-with-no-specified-goal.html"
  title: "interactive theorem proving with no specified goal"

- path: "examples/is-it-possible-to-force-induction-tactic-to-produce-more-equations.html"
  title: "Is it possible to force induction tactic to produce more equations?"

- path: "examples/lemma-about-list-and-revlist.html"
  title: "Lemma about <tt>list</tt> and <tt>rev list</tt>"
  tags: [fixpoint]

- path: "examples/lemma-as-a-type-in-a-record.html"
  title: "Lemma as a type in a record"

- path: "examples/less-or-equal-relation-with-largest-element-of-natural-number-list.html"
  title: "less or equal relation with largest element of natural number list"
  tags: [tactic]

- path: "examples/lift-existentials-in-coq.html"
  title: "Lift existentials in Coq"

- path: "examples/logic-auxilliry-lemma-for-tr-rev-correct.html"
  title: "Logic: auxilliry lemma for <tt>tr_rev_correct</tt>"
  tags: [fixpoint]

- path: "examples/make-subset-types-compatible-for-function-application.html"
  title: "make subset types compatible for function application"

- path: "examples/matching-with-ltac-on-a-call-containing-local-variable.html"
  title: "Matching with Ltac on a call containing local variable"
  tags: [tactic]

- path: "examples/mutual-recursion-on-an-inductive-type-and-nat.html"
  title: "mutual recursion on an inductive type and <tt>nat</tt>"
  tags: [fixpoint]

- path: "examples/nested-recursion-and-program-fixpoint-or-function.html"
  title: "Nested recursion and <tt>Program Fixpoint</tt> or <tt>Function</tt>"
  tags: [fixpoint]

- path: "examples/non-positive-occurrence-due-to-polymorphic-function.html"
  title: "Non-positive occurrence due to polymorphic function"
  tags: [proof-irrelevance]

- path: "examples/problems-with-missing-information-in-obligations-when-defining-using-program-in.html"
  title: "Problems with missing information in Obligations when defining using Program in Coq"
  tags: [tactic]

- path: "examples/program-fixpoint-recursive-call-in-let-and-hypothesis-of-the-obligation.html"
  title: "<tt>Program Fixpoint</tt>: recursive call in <tt>let</tt> and hypothesis of the obligation"
  tags: [fixpoint]

- path: "examples/proof-leaking-in-coq-extraction.html"
  title: "Proof leaking in Coq extraction?"
  tags: [fixpoint]

- path: "examples/proofs-of-structural-properties-of-arguments-in-match-in-coq.html"
  title: "Proofs of structural properties of arguments in match in coq"

- path: "examples/prove-a-constant-is-even.html"
  title: "Prove a constant is even"

- path: "examples/prove-properties-of-lists.html"
  title: "Prove properties of lists"

- path: "examples/prove-that-the-only-zero-length-vector-is-nil.html"
  title: "Prove that the only zero-length vector is nil"

- path: "examples/proving-a-property-on-sets.html"
  title: "Proving a property on sets"

- path: "examples/proving-decidability-for-a-datatype-that-includes-a-vector.html"
  title: "Proving decidability for a datatype that includes a vector"

- path: "examples/proving-equivalence-of-two-programs-expressed-as-different-types.html"
  title: "Proving equivalence of two programs expressed as different types"

- path: "examples/proving-forall-x-xs-ys-subseq-x-xs-ys-subseq-xs-ys-in-coq.html"
  title: "Proving <tt>forall x xs ys, subseq (x :: xs) ys -> subseq xs ys</tt> in Coq"

- path: "examples/proving-termination-of-function-in-coq.html"
  title: "Proving Termination of Function in Coq"

- path: "examples/proving-that-s-expressions-printing-is-injective.html"
  title: "Proving that s-expressions printing is injective"

- path: "examples/question-about-intros-and-intros-h.html"
  title: "question about intros <tt>[=]</tt> and intros <tt>[= <- H]</tt>"

- path: "examples/reasoning-about-typeclass-instance-that-has-been-picked-up-in-a-theorem.html"
  title: "reasoning about typeclass instance that has been picked up in a theorem?"

- path: "examples/record-equality-in-coq.html"
  title: "Record equality in coq"
  tags: [proof-irrelevance]

- path: "examples/recursion-for-church-encoding-of-equality.html"
  title: "Recursion for Church encoding of equality"
  tags: [fixpoint]

- path: "examples/recursive-use-of-typeclass-methods-in-coq.html"
  title: "Recursive use of typeclass methods in Coq"

- path: "examples/removing-trivial-match-clause-in-coq.html"
  title: "Removing trivial match clause in Coq"

- path: "examples/renaming-part-of-hypothesis-in-coq.html"
  title: "renaming part of hypothesis in Coq"

- path: "examples/representing-higher-order-functors-as-containers-in-coq.html"
  title: "Representing Higher-Order Functors as Containers in Coq"

- path: "examples/require-import-require-import.html"
  title: "<tt>Require</tt>, <tt>Import</tt>, <tt>Require Import</tt>"
  tags: [module]

- path: "examples/retrieving-constraints-from-gadt-to-ensure-exhaustion-of-pattern-matching-in-coq.html"
  title: "Retrieving constraints from GADT to ensure exhaustion of pattern matching in Coq"

- path: "examples/rewrite-under-exists.html"
  title: "Rewrite under <tt>exists</tt>"
  tags: [tactic]

- path: "examples/section-mechanism-in-coq-forbid-omitting-of-hypotheses-from-context.html"
  title: "Section mechanism in Coq. Forbid omitting of hypotheses from context"

- path: "examples/sf-volume-1-logic-how-to-prove-tr-rev-rev.html"
  title: "SF Volume 1: Logic: How to prove <tt>tr_rev <-> rev</tt>?"

- path: "examples/shorter-notation-for-matching-hypotheses-in-coq.html"
  title: "Shorter notation for matching hypotheses in Coq?"

- path: "examples/show-theorem-definition-in-coq.html"
  title: "Show theorem definition in Coq"

- path: "examples/some-help-dealing-with-inject-unject-and-vector-types.html"
  title: "Some help dealing with inject/unject and vector types"

- path: "examples/specialization-of-module-argument-in-coq.html"
  title: "Specialization of module argument in Coq"

- path: "examples/structural-recursion-on-two-arguments.html"
  title: "Structural recursion on two arguments"

- path: "examples/tactic-automation-simple-decision-procedure.html"
  title: "Tactic automation: simple decision procedure"
  tags: [decidable, tactic]

- path: "examples/teach-coq-to-check-termination.html"
  title: "Teach coq to check termination"

- path: "examples/transfering-proof-from-z-to-n-in-coq.html"
  title: "Transfering proof from Z to N in Coq"

- path: "examples/transform-casual-list-into-dependently-typed-list-in-coq.html"
  title: "Transform casual list into dependently typed list in Coq"

- path: "examples/transitivity-of-in-coq.html"
  title: "Transitivity of <tt>-></tt> in Coq"

- path: "examples/transitivity-of-subsequence-in-coq.html"
  title: "Transitivity of subsequence in COQ"

- path: "examples/turn-off-automatic-induction-principle-in-coq.html"
  title: "Turn off automatic induction principle in Coq"

- path: "examples/typeclasses-with-multiple-fields-vs-single-field-in-coq-unexpected-behaviour.html"
  title: "Typeclasses with multiple fields vs. single field in Coq / Unexpected behaviour of Compute command"

- path: "examples/understanding-specialize-tactic.html"
  title: "Understanding specialize tactic"

- path: "examples/understanding-well-founded-proofs-in-coq.html"
  title: "Understanding \"well founded\" proofs in Coq"

- path: "examples/unfold-notation-in-ltac.html"
  title: "unfold notation in ltac"

- path: "examples/use-module-signature-definition-in-module-implementation.html"
  title: "use module signature definition in module implementation"

- path: "examples/using-implicit-type-class-parameters-in-coq-notation.html"
  title: "Using Implicit Type Class Parameters in Coq Notation"

- path: "examples/using-induction-starting-from-1-in-coq.html"
  title: "Using induction starting from 1 in Coq"

- path: "examples/vector-error-the-type-of-this-term-is-a-product.html"
  title: "Vector error : The type of this term is a product"

- path: "examples/vector-t-a-n-t-a-n0.html"
  title: "Vector : <tt>t A n = t A (n+0)</tt>?"

- path: "examples/what-does-it-mean-when-coq-expands-a-function-as-part-of-the-goal.html"
  title: "What does it mean when Coq expands a function as part of the goal?"

- path: "examples/what-does-proof-simpl-reflexivity-qed-mean-in-coq.html"
  title: "What does Proof. simpl. reflexivity. Qed. mean in Coq?"

- path: "examples/what-does-the-tactic-destruct-do-in-the-proof-below.html"
  title: "What does the tactic destruct do in the proof below?"

- path: "examples/what-does-the-tactic-induction-followed-by-a-number-do.html"
  title: "What does the tactic <tt>induction</tt> followed by a number do?"

- path: "examples/what-is-a-concrete-example-of-the-type-set-and-what-is-the-meaning-of-set.html"
  title: "What is a concrete example of the type <tt>Set</tt> and what is the meaning of <tt>Set</tt>?"

- path: "examples/what-is-difference-between-destruct-and-case-eq-tactics-in-coq.html"
  title: "What is difference between <tt>destruct</tt> and <tt>case_eq</tt> tactics in Coq?"

- path: "examples/what-is-eq-rect-and-where-is-it-defined-in-coq.html"
  title: "What is <tt>eq_rect</tt> and where is it defined in Coq?"

- path: "examples/what-is-in-coq.html"
  title: "What <tt><></tt> is in Coq"

- path: "examples/what-is-the-difference-between-axiom-and-variable-in-coq.html"
  title: "What is the difference between Axiom and Variable in Coq"
  tags: [tactic]

- path: "examples/what-is-the-difference-between-lemma-and-theorem-in-coq.html"
  title: "What is the difference between Lemma and Theorem in Coq"

- path: "examples/what-should-be-done-when-simpl-does-not-reduce-all-the-necessary-steps.html"
  title: "What should be done when simpl does not reduce all the necessary steps?"

- path: "examples/when-are-the-constructors-of-an-inductive-type-exhaustive.html"
  title: "When are the constructors of an inductive type exhaustive?"

- path: "examples/why-can-i-use-the-constructor-tactic-to-prove-reflexivity.html"
  title: "Why can I use the constructor tactic to prove reflexivity?"

- path: "examples/why-do-calculus-of-construction-based-languages-use-setoids-so-much.html"
  title: "Why do Calculus of Construction based languages use Setoids so much?"

- path: "examples/why-does-coq-init-logic-define-the-notation-a-b.html"
  title: "Why does <tt>Coq.Init.Logic</tt> define the notation <tt>A -> B</tt>?"

- path: "examples/why-does-coqs-typechecker-reject-my-map-definition.html"
  title: "Why does coq's typechecker reject my map definition?"

- path: "examples/why-does-nesting-the-induction-tactic-also-nest-the-inductive-hypotheses-under-a.html"
  title: "Why does nesting the induction tactic also nest the inductive hypotheses under a lambda?"

- path: "examples/why-havent-newer-dependently-typed-languages-adopted-ssreflects-approach.html"
  title: "Why haven't newer dependently typed languages adopted SSReflect's approach?"
